#+BEGIN_COMMENT
Constraints:
1. The frame in which you're editing must have its cwd be the toplevel of
the document directory. This is so image generation is linked correctly into
the org document.

2. You must have an sbcl repl running with the right stuff loaded into it
and in the right package. To configure the repl:

(ql:quickload :cricket)
(defpackage #:my-package
(:local-nicknames (#:c #:cricket))
(:use #:cl))
(in-package #:my-package)

3. C-c C-v b will rebuild the whole of the document and all images and
all docstrings.

4. C-c C-e g g will emit a github style markdown.

5. Ensure to save everything and commit all changed files, even images.
#+END_COMMENT

#+OPTIONS: toc:2

* Cricket Introduction
This document describes the ~cricket~ coherent noise library. It is in the
process of being written.
* Coherent Noise
* API
** Generators
*** Perlin
**** Function: *(perlin-1d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:perlin-1d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 1-dimensional Perlin Improved noise values
: ranging from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
TBD
**** Function: *(perlin-2d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:perlin-2d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 2-dimensional Perlin Improved noise values
: ranging from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
TBD
**** Function: *(perlin-3d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:perlin-3d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 3-dimensional Perlin Improved noise values
: ranging from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
TBD
**** Function: *(perlin-4d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:perlin-4d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 4-dimensional Perlin Improved noise values
: ranging from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
TBD
*** Simplex
**** Function: *(simplex-1d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:simplex-1d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 1-dimensional Simplex noise values ranging from
: -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
TBD
**** Function: *(simplex-2d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:simplex-2d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 2-dimensional Simplex noise values ranging from
: -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
TBD
**** Function: *(simplex-3d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:simplex-3d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 3-dimensional Simplex noise values ranging from
: -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
TBD
**** Function: *(simplex-4d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:simplex-4d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 4-dimensional Simplex noise values ranging from
: -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
TBD
*** Open-Simplex
**** Function: *(open-simplex-2d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:open-simplex-2d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 2-dimensional OpenSimplex noise values ranging
: from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
TBD
**** Function: *(open-simplex-3d *key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:open-simplex-3d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 3-dimensional OpenSimplex noise values ranging
: from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
TBD
**** Function: *(open-simplex-4d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:open-simplex-4d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 4-dimensional OpenSimplex noise values ranging
: from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
TBD
**** Function: *(open-simplex2f-2d &key seed (orientation :standard))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:open-simplex2f-2d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs 2-dimensional OpenSimplex2F noise values ranging
from -1.0 to 1.0.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`orientation`: One of `:standard` or `:x/y`, denoting the orientation of the lattice. `:x/y` has the
Y axis pointing down the main diagonal, which might be more suitable for a game where Y is
vertical (optional, default: `:standard`).
#+end_example

***** Example
TBD
**** Function: *(open-simplex2f-3d &key seed (orientation :standard))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:open-simplex2f-3d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs 3-dimensional OpenSimplex2F noise values ranging
from -1.0 to 1.0.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`orientation`: One of `:standard`, `:xy/z`, or `:xz/y`, denoting the orientation of the lattice.
`:xy/z` has better visual isotropy in XY, and `:xz/y` has better visual isotropy in XZ (optional,
default: `:standard`).
#+end_example

***** Example
TBD
**** Function: *(open-simplex2f-4d &key seed (orientation :standard))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:open-simplex2f-4d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs 4-dimensional OpenSimplex2F noise values ranging
from -1.0 to 1.0.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`orientation`: One of `:standard`, `:xy/zw`, `:xz/yw`, or `:xyz/w`, denoting the orientation of the
lattice. `:xy/zw` is recommended for 3D terrain where X/Y or Z/W are horizontal. `:xz/yw` is
recommended for 3D terrain where X/Z or Y/W are horizontal. `:xyz/w` is recommended for time-varied
animations of 3D objects, where W is time (optional, default: `:standard`).
#+end_example

***** Example
TBD
**** Function: *(open-simplex2s-2d &key seed (orientation :standard))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:open-simplex2s-2d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs 2-dimensional OpenSimplex2S noise values ranging
from -1.0 to 1.0.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`orientation`: One of `:standard` or `:x/y`, denoting the orientation of the lattice. `:x/y` has the
Y axis pointing down the main diagonal, which might be more suitable for a game where Y is
vertical (optional, default: `:standard`).
#+end_example

***** Example
TBD
**** Function: *(open-simplex2s-3d &key seed (orientation :standard))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:open-simplex2s-3d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs 3-dimensional OpenSimplex2S noise values ranging
from -1.0 to 1.0.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`orientation`: One of `:standard`, `:xy/z`, or `:xz/y`, denoting the orientation of the lattice.
`:xy/z` has better visual isotropy in XY, and `:xz/y` has better visual isotropy in XZ (optional,
default: `:standard`).
#+end_example

***** Example
TBD
**** Function: *(open-simplex2s-4d &key seed (orientation :standard))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:open-simplex2s-4d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs 4-dimensional OpenSimplex2S noise values ranging
from -1.0 to 1.0.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`orientation`: One of `:standard`, `:xy/zw`, `:xz/yw`, or `:xyz/w`, denoting the orientation of the
lattice. `:xy/zw` is recommended for 3D terrain where X/Y or Z/W are horizontal. `:xz/yw` is
recommended for 3D terrain where X/Z or Y/W are horizontal. `:xyz/w` is recommended for time-varied
animations of 3D objects, where W is time (optional, default: `:standard`).
#+end_example

***** Example
TBD
*** Value
**** Function: *(value-2d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:value-2d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 2-dimensional value noise values ranging from
: -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
TBD
**** Function: *(value-3d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:value-3d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 3-dimensional value noise values ranging from
: -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
TBD
*** Cellular
**** Function: *(cellular-2d &key seed (distance-method :euclidean) (output-type :f1) (jitter 1.0d0))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:cellular-2d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs 2-dimensional cellular noise values ranging from
-1.0 to 1.0.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`distance-method`: One of `:manhattan`, `:euclidean`, `:euclidean-squared`, `:chebyshev`, or
`:minkowski4`, denoting the distance function to use (optional, default: `:euclidean`).

`output-type`: One of `:value`, `:f1`, `:f2`, `:f1+f2`, `:f2-f1`, `:f1*f2`, or `:f1/f2` denoting the
features to use (optional, default: `:f1`).

`jitter`: A real number between 0.0 and 1.0, with values closer to one randomly distributing cells
away from their grid alignment (optional, default: 1.0).
#+end_example

***** Example
TBD
**** Function: *(cellular-3d &key seed (distance-method :euclidean) (output-type :f1) (jitter 1.0d0))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:cellular-3d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs 3-dimensional cellular noise values ranging from
-1.0 to 1.0.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`distance-method`: One of `:manhattan`, `:euclidean`, `:euclidean-squared`, `:chebyshev`, or
`:minkowski4`, denoting the distance function to use (optional, default: `:euclidean`).

`output-type`: One of `:value`, `:f1`, `:f2`, `:f1+f2`, `:f2-f1`, `:f1*f2`, or `:f1/f2` denoting the
features to use (optional, default: `:f1`).

`jitter`: A real number between 0.0 and 1.0, with values closer to one randomly distributing cells
away from their grid alignment (optional, default: 1.0).
#+end_example

***** Example
TBD
*** Cylinders
**** Function: *(cylinders-3d &key seed (frequency 1.0d0))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:cylinders-3d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 3-dimensional concentric cylinder values ranging
: from -1.0 to 1.0. The cylinders are oriented with their length along the Z axis.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).
:
: `frequency`: The frequency of the signal, which controls how small or large the cylinders are
: (optional, default: 1.0).

***** Example
TBD
*** Spheres
**** Function: *(spheres-3d &key seed (frequency 1.0d0))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:spheres-3d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 3-dimensional concentric sphere values ranging
: from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).
:
: `frequency`: The frequency of the signal, which controls how small or large the spheres are
: (optional, default: 1.0).

***** Example
TBD
*** Checker
**** Function: *(checker-2d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:checker-2d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs a 2-dimensional checkered grid pattern, with
: values being either -1.0 or 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
TBD
*** Constant
**** Function: *(constant value &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:constant 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs the constant `value` supplied. This is useful for
: debugging and applications where you need to combine a constant value.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
TBD
*** FBM: Fractal Brownian Motion
**** Function: *(fbm-2d &key seed (generator #'cricket:open-simplex2f-2d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 0.5))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:fbm-2d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
2-dimensional fractional Brownian motion noise, using the supplied `generator` function to construct
each octave's sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 2-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2f-2d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 0.5).
#+end_example

***** Example
TBD
**** Function: *(fbm-3d &key seed (generator #'cricket:open-simplex2f-3d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 0.5))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:fbm-3d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
3-dimensional fractional Brownian motion noise, using the supplied `generator` function to construct
each octave's sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 3-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2f-3d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 0.5).
#+end_example

***** Example
TBD
**** Function: *(fbm-4d &key seed (generator #'cricket:open-simplex2f-4d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 0.5))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:fbm-4d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
4-dimensional fractional Brownian motion noise, using the supplied `generator` function to construct
each octave's sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 4-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2f-4d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 0.5).
#+end_example

***** Example
TBD
*** Billow
**** Function: *(billow-2d &key seed (generator #'cricket:open-simplex2s-2d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 0.5))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:billow-2d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
2-dimensional billow fractal noise, using the supplied `generator` function to construct each
octave's sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 2-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2s-2d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 0.5).
#+end_example

***** Example
TBD
**** Function: *(billow-3d &key seed (generator #'cricket:open-simplex2s-3d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 0.5))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:billow-3d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
3-dimensional billow fractal noise, using the supplied `generator` function to construct each
octave's sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 3-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2s-3d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 0.5).
#+end_example

***** Example
TBD
**** Function: *(billow-4d &key seed (generator #'cricket:open-simplex2s-4d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 0.5))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:billow-4d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
4-dimensional billow fractal noise, using the supplied `generator` function to construct each
octave's sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 4-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2s-4d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 0.5).
#+end_example

***** Example
TBD
*** Multifractal
**** multifractal-2d
**** multifractal-3d
**** multifractal-4d
*** Hybrid-Multifractal
**** hybrid-multifractal-2d
**** hybrid-multifractal-3d
**** hybrid-multifractal-4d
*** Ridged-Multifractal
**** ridged-multifractal-2d
**** ridged-multifractal-3d
**** ridged-multifractal-4d
** Modifiers
*** +
*** -
*** *
*** /
*** abs
*** blend
*** cache
*** clamp
*** curve
*** displace
*** expt
*** fractalize
*** max
*** negate
*** power
*** rotate
*** scale
*** select
*** strengthen
*** terrace
*** translate
*** turbulance
*** uniform-scale
** Map
*** define-gradient
*** get-image-pixel
*** image
**** image-height
**** image-width
**** image-data
*** make-map
**** map-data
**** map-height
**** map-value
**** map-width
*** render-map
*** write-image
* Glossary
* References
* Prototyping
Remove this entire section when the org more docs are complete.
** Org Mode Code Block Examples
This is an example of how to configure org-mode so that when I execute
a block of common lisp the image it generates is places realtime inlined
into the org document as appropriate.

#+BEGIN_SRC shell :results output silent
echo "Hello world"
#+END_SRC

#+BEGIN_SRC lisp :results output silent
(ql:quickload :cricket)
(defpackage #:my-package
  (:local-nicknames (#:c #:cricket))
  (:use #:cl))
(in-package #:my-package) ;; <- doesn't affect repl!
#+END_SRC

#+BEGIN_SRC lisp :var arg="img/proto/proto-0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:checker-2d :seed "example")
  ;;(c:uniform-scale 1/4)
  (c:fractalize :fbm :octaves 3)
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/proto/proto-0.png]]
:end:

Example text.

#+BEGIN_SRC lisp :var arg="img/proto/proto-1.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:perlin-3d :seed "example")
  (c:uniform-scale 1.5)
  (c:fractalize :fbm :frequency 1.3 :octaves 6 :lacunarity 3 :persistence 0.22)
  (c:turbulence (c:open-simplex-3d :seed "foo") :power 1.2 :roughness 4)
  (c:make-map :width 256 :height 256)
  (c:render-map :gradient :terrain)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/proto/proto-1.png]]
:end:

Documentation retrival test:

*(perlin-2d &key seed)*
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:perlin-2d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 2-dimensional Perlin Improved noise values
: ranging from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

** Org Mode Wisdom
*** [[https://www.gnu.org/software/emacs/refcards/pdf/orgcard.pdf]]
*** [[https://orgmode.org/worg/orgcard.html]]
*** [[https://orgmode.org/manual/Variable-Index.html]]
*** C-c C-x C-v - org-toggle-inline-images
Used to toggle all inline images on and off.
*** C-c C-v b - org-babel-execute-buffer.
Execute all code blocks in the buffer and update the results.

#+BEGIN_COMMENT

The following code block utility is a post processor to convert the
absolute pathname of C:WRITE-IMAGE which has been flatted into a
string by org mode--with the #P and double quotes included(!), into
a string of just the relative filename given the cwd of theemacs process.
This is a pure hack that suffices for this one use case so I can develop
these docs with a fast workflow.

#+END_COMMENT
#+NAME: namestring
#+BEGIN_SRC lisp :var path="" :results output :exports none
(block hack
  (let* ((cwd (namestring (truename ".")))
         (broken "./img/static/broken.png"))
    (unless (and path (vectorp path) (>= (length path) 4))
      (return-from hack broken))

    ;; Attempt to clean up the path and remove the hamfisted
    ;; bodge org-mode did.
    (let* ((path (if (string= "#P\"" (subseq path 0 3))
                     (subseq path 2 (1- (length path)))
                     path)))

      ;; First, check that the cwd is actually a prefix of the path. This
      ;; increases the probability we're in the right cwd.
      (unless (search cwd path)
        (error "The path ~A is not a subpath of cwd ~A. cd to ~~/..../cricket-docs/"
               path cwd))
      (let* ((rel-path
               ;; strip off the #P"prefix and then the final " to leave
               ;; the path as a relative path wrt the cwd.
               ;; TODO: This means the cd of the emacs frame working on this
               ;; project MUST be cricket-docs/ for now. Ah well.
               (concatenate 'string "./"
                            (subseq (namestring path)
                                    ;; 1+ for the cwd's final /
                                    (1+ (length cwd)))))
             ;; Check to make sure it is actually valid.
             (rel-path (if (probe-file rel-path)
                           rel-path
                           broken)))
        ;; Finally dump to stdout.
        (format t "~A" rel-path)))))
#+END_SRC

#+RESULTS: namestring
