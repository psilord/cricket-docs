#+BEGIN_COMMENT
Constraints:
1. The frame in which you're editing must have its cwd be the toplevel of
the document directory. This is so image generation is linked correctly into
the org document.

2. You must have an sbcl repl running with the right stuff loaded into it
and in the right package. To configure the repl:

(ql:quickload :cricket)
(defpackage #:my-package
(:local-nicknames (#:c #:cricket))
(:use #:cl))
(in-package #:my-package)

3. C-c C-v b will rebuild the whole of the document and all images and
all docstrings.

4. C-c C-e g g will emit a github style markdown.

5. Ensure to save everything and commit all changed files, even images.
#+END_COMMENT

#+OPTIONS: toc:2

* Cricket Introduction
This document describes the ~cricket~ coherent noise library. It is in the
process of being written.
* Coherent Noise
* API
Cricket's API is split into three main pieces: Generators which generate a
source signal of noise, Modifiers which mutate, combine, or otherwise alter a
noise signal, and Maps which control how noise gets rendered to an in memory
image (which can then be stored to disk).

All of the examples show at least the simplest use of the noise function
with no additional affects on it. Some examples may demonstrate additional
effects in the parameter space of the functions.

For all of these examples, for package brevity, assume that this piece
of code has been run in your REPL:

#+BEGIN_SRC lisp :results output silent
(ql:quickload :cricket)
(defpackage #:my-package
  (:local-nicknames (#:c #:cricket))
  (:use #:cl))
(in-package #:my-package)
#+END_SRC

** Generators

The Generators are demonstrated with no modifications applied to the
noise signal.

*** Perlin
**** Function: *(perlin-1d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:perlin-1d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 1-dimensional Perlin Improved noise values
: ranging from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
We encode the 1D noise into a 2D image by simply repeating the noise
for each row.
#+BEGIN_SRC lisp :var arg="img/api/perlin-1d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:perlin-1d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/perlin-1d-ex0.png]]
:end:

**** Function: *(perlin-2d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:perlin-2d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 2-dimensional Perlin Improved noise values
: ranging from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
#+BEGIN_SRC lisp :var arg="img/api/perlin-2d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:perlin-2d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/perlin-2d-ex0.png]]
:end:

**** Function: *(perlin-3d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:perlin-3d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 3-dimensional Perlin Improved noise values
: ranging from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
#+BEGIN_SRC lisp :var arg="img/api/perlin-3d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:perlin-3d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/perlin-3d-ex0.png]]
:end:

**** Function: *(perlin-4d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:perlin-4d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 4-dimensional Perlin Improved noise values
: ranging from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
#+BEGIN_SRC lisp :var arg="img/api/perlin-4d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:perlin-4d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/perlin-4d-ex0.png]]
:end:

*** Simplex
**** Function: *(simplex-1d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:simplex-1d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 1-dimensional Simplex noise values ranging from
: -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
We encode the 1D noise into a 2D image by simply repeating the noise
for each row.

#+BEGIN_SRC lisp :var arg="img/api/simplex-1d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:simplex-1d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/simplex-1d-ex0.png]]
:end:

**** Function: *(simplex-2d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:simplex-2d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 2-dimensional Simplex noise values ranging from
: -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
#+BEGIN_SRC lisp :var arg="img/api/simplex-2d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:simplex-2d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/simplex-2d-ex0.png]]
:end:

**** Function: *(simplex-3d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:simplex-3d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 3-dimensional Simplex noise values ranging from
: -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
#+BEGIN_SRC lisp :var arg="img/api/simplex-3d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:simplex-3d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/simplex-3d-ex0.png]]
:end:

**** Function: *(simplex-4d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:simplex-4d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 4-dimensional Simplex noise values ranging from
: -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
#+BEGIN_SRC lisp :var arg="img/api/simplex-4d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:simplex-4d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/simplex-4d-ex0.png]]
:end:

*** Open-Simplex
**** Function: *(open-simplex-2d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:open-simplex-2d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 2-dimensional OpenSimplex noise values ranging
: from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
#+BEGIN_SRC lisp :var arg="img/api/open-simplex-2d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:open-simplex-2d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/open-simplex-2d-ex0.png]]
:end:

**** Function: *(open-simplex-3d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:open-simplex-3d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 3-dimensional OpenSimplex noise values ranging
: from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
#+BEGIN_SRC lisp :var arg="img/api/open-simplex-3d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:open-simplex-3d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/open-simplex-3d-ex0.png]]
:end:

**** Function: *(open-simplex-4d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:open-simplex-4d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 4-dimensional OpenSimplex noise values ranging
: from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
#+BEGIN_SRC lisp :var arg="img/api/open-simplex-4d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:open-simplex-4d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/open-simplex-4d-ex0.png]]
:end:

TBD
*** Open-Simplex 2F (Fast)
**** Function: *(open-simplex2f-2d &key seed (orientation :standard))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:open-simplex2f-2d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs 2-dimensional OpenSimplex2F noise values ranging
from -1.0 to 1.0.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`orientation`: One of `:standard` or `:x/y`, denoting the orientation of the lattice. `:x/y` has the
Y axis pointing down the main diagonal, which might be more suitable for a game where Y is
vertical (optional, default: `:standard`).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/open-simplex2f-2d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:open-simplex2f-2d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/open-simplex2f-2d-ex0.png]]
:end:

**** Function: *(open-simplex2f-3d &key seed (orientation :standard))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:open-simplex2f-3d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs 3-dimensional OpenSimplex2F noise values ranging
from -1.0 to 1.0.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`orientation`: One of `:standard`, `:xy/z`, or `:xz/y`, denoting the orientation of the lattice.
`:xy/z` has better visual isotropy in XY, and `:xz/y` has better visual isotropy in XZ (optional,
default: `:standard`).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/open-simplex2f-3d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:open-simplex2f-3d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/open-simplex2f-3d-ex0.png]]
:end:

TBD
**** Function: *(open-simplex2f-4d &key seed (orientation :standard))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:open-simplex2f-4d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs 4-dimensional OpenSimplex2F noise values ranging
from -1.0 to 1.0.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`orientation`: One of `:standard`, `:xy/zw`, `:xz/yw`, or `:xyz/w`, denoting the orientation of the
lattice. `:xy/zw` is recommended for 3D terrain where X/Y or Z/W are horizontal. `:xz/yw` is
recommended for 3D terrain where X/Z or Y/W are horizontal. `:xyz/w` is recommended for time-varied
animations of 3D objects, where W is time (optional, default: `:standard`).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/open-simplex2f-4d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:open-simplex2f-4d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/open-simplex2f-4d-ex0.png]]
:end:

*** Open-Simplex 2S (Smooth)
**** Function: *(open-simplex2s-2d &key seed (orientation :standard))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:open-simplex2s-2d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs 2-dimensional OpenSimplex2S noise values ranging
from -1.0 to 1.0.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`orientation`: One of `:standard` or `:x/y`, denoting the orientation of the lattice. `:x/y` has the
Y axis pointing down the main diagonal, which might be more suitable for a game where Y is
vertical (optional, default: `:standard`).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/open-simplex2s-2d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:open-simplex2s-2d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/open-simplex2s-2d-ex0.png]]
:end:

TBD
**** Function: *(open-simplex2s-3d &key seed (orientation :standard))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:open-simplex2s-3d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs 3-dimensional OpenSimplex2S noise values ranging
from -1.0 to 1.0.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`orientation`: One of `:standard`, `:xy/z`, or `:xz/y`, denoting the orientation of the lattice.
`:xy/z` has better visual isotropy in XY, and `:xz/y` has better visual isotropy in XZ (optional,
default: `:standard`).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/open-simplex2s-3d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:open-simplex2s-3d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/open-simplex2s-3d-ex0.png]]
:end:

TBD
**** Function: *(open-simplex2s-4d &key seed (orientation :standard))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:open-simplex2s-4d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs 4-dimensional OpenSimplex2S noise values ranging
from -1.0 to 1.0.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`orientation`: One of `:standard`, `:xy/zw`, `:xz/yw`, or `:xyz/w`, denoting the orientation of the
lattice. `:xy/zw` is recommended for 3D terrain where X/Y or Z/W are horizontal. `:xz/yw` is
recommended for 3D terrain where X/Z or Y/W are horizontal. `:xyz/w` is recommended for time-varied
animations of 3D objects, where W is time (optional, default: `:standard`).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/open-simplex2s-4d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:open-simplex2s-4d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/open-simplex2s-4d-ex0.png]]
:end:

*** Value
**** Function: *(value-2d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:value-2d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 2-dimensional value noise values ranging from
: -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
#+BEGIN_SRC lisp :var arg="img/api/value-2d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:value-2d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/value-2d-ex0.png]]
:end:

TBD
**** Function: *(value-3d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:value-3d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 3-dimensional value noise values ranging from
: -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
#+BEGIN_SRC lisp :var arg="img/api/value-3d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:value-3d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/value-3d-ex0.png]]
:end:

TBD
*** Cellular
**** Function: *(cellular-2d &key seed (distance-method :euclidean) (output-type :f1) (jitter 1.0d0))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:cellular-2d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs 2-dimensional cellular noise values ranging from
-1.0 to 1.0.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`distance-method`: One of `:manhattan`, `:euclidean`, `:euclidean-squared`, `:chebyshev`, or
`:minkowski4`, denoting the distance function to use (optional, default: `:euclidean`).

`output-type`: One of `:value`, `:f1`, `:f2`, `:f1+f2`, `:f2-f1`, `:f1*f2`, or `:f1/f2` denoting the
features to use (optional, default: `:f1`).

`jitter`: A real number between 0.0 and 1.0, with values closer to one randomly distributing cells
away from their grid alignment (optional, default: 1.0).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/cellular-2d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:cellular-2d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/cellular-2d-ex0.png]]
:end:

TBD
**** Function: *(cellular-3d &key seed (distance-method :euclidean) (output-type :f1) (jitter 1.0d0))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:cellular-3d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs 3-dimensional cellular noise values ranging from
-1.0 to 1.0.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`distance-method`: One of `:manhattan`, `:euclidean`, `:euclidean-squared`, `:chebyshev`, or
`:minkowski4`, denoting the distance function to use (optional, default: `:euclidean`).

`output-type`: One of `:value`, `:f1`, `:f2`, `:f1+f2`, `:f2-f1`, `:f1*f2`, or `:f1/f2` denoting the
features to use (optional, default: `:f1`).

`jitter`: A real number between 0.0 and 1.0, with values closer to one randomly distributing cells
away from their grid alignment (optional, default: 1.0).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/cellular-3d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:cellular-3d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/cellular-3d-ex0.png]]
:end:
*** Cylinders
**** Function: *(cylinders-3d &key seed (frequency 1.0d0))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:cylinders-3d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 3-dimensional concentric cylinder values ranging
: from -1.0 to 1.0. The cylinders are oriented with their length along the Z axis.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).
:
: `frequency`: The frequency of the signal, which controls how small or large the cylinders are
: (optional, default: 1.0).

***** Example
#+BEGIN_SRC lisp :var arg="img/api/cylinders-3d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:cylinders-3d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/cylinders-3d-ex0.png]]
:end:

TBD
*** Spheres
**** Function: *(spheres-3d &key seed (frequency 1.0d0))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:spheres-3d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 3-dimensional concentric sphere values ranging
: from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).
:
: `frequency`: The frequency of the signal, which controls how small or large the spheres are
: (optional, default: 1.0).

***** Example
#+BEGIN_SRC lisp :var arg="img/api/spheres-3d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:spheres-3d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/spheres-3d-ex0.png]]
:end:

*** Checker
**** Function: *(checker-2d &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:checker-2d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs a 2-dimensional checkered grid pattern, with
: values being either -1.0 or 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
#+BEGIN_SRC lisp :var arg="img/api/checker-2d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:checker-2d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/checker-2d-ex0.png]]
:end:

TBD
*** Constant
**** Function: *(constant value &key seed)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:constant 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs the constant `value` supplied. This is useful for
: debugging and applications where you need to combine a constant value.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

***** Example
The value is a coefficient between 0 and 1 that represents a linearly
inerpolated value from -1 to 1. It is this interpolated value that
is emitted by the constant function.

In this example, the .5 value actually means to emit a
constant value halfway from -1 to 1, which is 0 in the range -1 to 1.
Then, render-map will rescale this to fit into the color gamut,
resulting in a color that is (red: .5, green: .5, blue: .5). Be aware
of the remapping of ranges with this function.

#+BEGIN_SRC lisp :var arg="img/api/constant-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:constant .5 :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/constant-ex0.png]]
:end:

*** FBM: Fractal Brownian Motion
**** Function: *(fbm-2d &key seed (generator #'cricket:open-simplex2f-2d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 0.5))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:fbm-2d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
2-dimensional fractional Brownian motion noise, using the supplied `generator` function to construct
each octave's sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 2-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2f-2d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 0.5).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/fbm-2d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:fbm-2d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/fbm-2d-ex0.png]]
:end:

**** Function: *(fbm-3d &key seed (generator #'cricket:open-simplex2f-3d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 0.5))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:fbm-3d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
3-dimensional fractional Brownian motion noise, using the supplied `generator` function to construct
each octave's sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 3-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2f-3d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 0.5).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/fbm-3d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:fbm-3d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/fbm-3d-ex0.png]]
:end:

**** Function: *(fbm-4d &key seed (generator #'cricket:open-simplex2f-4d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 0.5))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:fbm-4d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
4-dimensional fractional Brownian motion noise, using the supplied `generator` function to construct
each octave's sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 4-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2f-4d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 0.5).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/fbm-4d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:fbm-4d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/fbm-4d-ex0.png]]
:end:

*** Billow
**** Function: *(billow-2d &key seed (generator #'cricket:open-simplex2s-2d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 0.5))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:billow-2d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
2-dimensional billow fractal noise, using the supplied `generator` function to construct each
octave's sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 2-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2s-2d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 0.5).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/billow-2d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:billow-2d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/billow-2d-ex0.png]]
:end:

TBD
**** Function: *(billow-3d &key seed (generator #'cricket:open-simplex2s-3d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 0.5))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:billow-3d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
3-dimensional billow fractal noise, using the supplied `generator` function to construct each
octave's sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 3-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2s-3d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 0.5).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/billow-3d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:billow-3d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/billow-3d-ex0.png]]
:end:

**** Function: *(billow-4d &key seed (generator #'cricket:open-simplex2s-4d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 0.5))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:billow-4d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
4-dimensional billow fractal noise, using the supplied `generator` function to construct each
octave's sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 4-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2s-4d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 0.5).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/billow-4d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:billow-4d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/billow-4d-ex0.png]]
:end:

*** Multifractal
**** Function: (*multifractal-2d &key seed (generator #'cricket:open-simplex2s-2d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 0.5))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:multifractal-2d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
2-dimensional multifractal noise, using the supplied `generator` function to construct each octave's
sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 2-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2s-2d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 0.5).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/multifractal-2d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:multifractal-2d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/multifractal-2d-ex0.png]]
:end:

TBD
**** Function: (*multifractal-3d &key seed (generator #'cricket:open-simplex2s-3d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 0.5))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:multifractal-3d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
3-dimensional multifractal noise, using the supplied `generator` function to construct each octave's
sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 3-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2s-3d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 0.5).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/multifractal-3d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:multifractal-3d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/multifractal-3d-ex0.png]]
:end:

TBD
**** Function: (*multifractal-4d &key seed (generator #'cricket:open-simplex2s-4d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 0.5))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:multifractal-4d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
4-dimensional multifractal noise, using the supplied `generator` function to construct each octave's
sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 4-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2s-4d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 0.5).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/multifractal-4d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:multifractal-4d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/multifractal-4d-ex0.png]]
:end:

*** Hybrid-Multifractal
**** Function: *(hybrid-multifractal-2d &key seed (generator #'cricket:open-simplex2s-2d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 0.25))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:hybrid-multifractal-2d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
2-dimensional hybrid multifractal noise, using the supplied `generator` function to construct each
octave's sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 2-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2s-2d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 0.25).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/hybrid-multifractal-2d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:hybrid-multifractal-2d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/hybrid-multifractal-2d-ex0.png]]
:end:

**** Function: *(hybrid-multifractal-3d &key seed (generator #'cricket:open-simplex2s-3d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 0.25))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:hybrid-multifractal-3d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
3-dimensional hybrid multifractal noise, using the supplied `generator` function to construct each
octave's sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 3-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2s-3d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 0.25).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/hybrid-multifractal-3d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:hybrid-multifractal-3d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/hybrid-multifractal-3d-ex0.png]]
:end:
**** Function: *(hybrid-multifractal-4d &key seed (generator #'cricket:open-simplex2s-4d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 0.25))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:hybrid-multifractal-4d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
4-dimensional hybrid multifractal noise, using the supplied `generator` function to construct each
octave's sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 4-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2s-4d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 0.25).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/hybrid-multifractal-4d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:hybrid-multifractal-4d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/hybrid-multifractal-4d-ex0.png]]
:end:

*** Ridged-Multifractal
**** Function: *(ridged-multifractal-2d &key seed (generator #'cricket:open-simplex2s-2d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 1.0) (attenuation 2.0))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:ridged-multifractal-2d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
2-dimensional ridged multifractal noise, using the supplied `generator` function to construct each
octave's sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 2-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2s-2d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 1.0).

`attenuation`: The attenuation to apply to the weight of each octave (optional, default: 2.0).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/ridged-multifractal-2d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:ridged-multifractal-2d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/ridged-multifractal-2d-ex0.png]]
:end:

**** Function: *(ridged-multifractal-3d &key seed (generator #'cricket:open-simplex2s-3d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 1.0) (attenuation 2.0))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:ridged-multifractal-3d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
3-dimensional ridged multifractal noise, using the supplied `generator` function to construct each
octave's sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 3-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2s-3d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 1.0).

`attenuation`: The attenuation to apply to the weight of each octave (optional, default: 2.0).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/ridged-multifractal-3d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:ridged-multifractal-3d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/ridged-multifractal-3d-ex0.png]]
:end:

**** Function: *(ridged-multifractal-4d &key seed (generator #'cricket:open-simplex2s-4d) (octaves 4) (frequency 1.0) (lacunarity 2.0) (persistence 1.0) (attenuation 2.0))*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:ridged-multifractal-4d 'function)))
#+END_SRC

#+RESULTS:
#+begin_example
Construct a sampler that, when sampled, outputs the application of multiple octaves of a
4-dimensional ridged multifractal noise, using the supplied `generator` function to construct each
octave's sampler.

`seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
supplied, one will be generated automatically which will negatively affect the reproducibility of
the noise (optional, default: NIL).

`generator`: a function object pointing to one of the built-in 4-dimensional generators that is used
to construct a different sampler, each with a different seed, for each octave (optional, default
`#'open-simplex2s-4d`).

`octaves`: An integer between 1 and 32, denoting the number of octaves to apply (optional, default:
4).

`frequency`: The frequency of the first octave's signal (optional, default: 1.0).

`lacunarity`: A multiplier that determines how quickly the frequency increases for successive
octaves (optional, default: 2.0).

`persistence`: A multiplier that determines how quickly the amplitude diminishes for successive
octaves (optional, default 1.0).

`attenuation`: The attenuation to apply to the weight of each octave (optional, default: 2.0).
#+end_example

***** Example
#+BEGIN_SRC lisp :var arg="img/api/ridged-multifractal-4d-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:ridged-multifractal-4d :seed "example")
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/ridged-multifractal-4d-ex0.png]]
:end:

** Modifiers

Some of examples in these modifiers use ~strengthen~ in the
resultat noise signal in order to rescale the output so it fits into the
color range of the image. Otherwise, as minimal examples as possible are
constructed.

*** Function: *(+ source1 source2)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:+ 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs the result of adding the outputs of `source1` and
: `source2`.
:
: `source1`: The first input sampler (required).
:
: `source2`: The second input sampler (required).

***** Example

This example averages two noise sources together.

#+BEGIN_SRC lisp :var arg="img/api/plus-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:+ (c:billow-2d :seed "example")
           (c:checker-2d :seed "example"))
  (c:strengthen 1/2)
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/plus-ex0.png]]
:end:
*** Function: *(- source1 source2)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:- 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs the result of subtracting the output `source2`
: from the output of `source1`.
:
: `source1`: The first input sampler (required).
:
: `source2`: The second input sampler (required).

***** Example
#+BEGIN_SRC lisp :var arg="img/api/minus-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:- (c:checker-2d :seed "example")
           (c:checker-2d :seed "example"))
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/minus-ex0.png]]
:end:
*** Function: *(** *source1 source2)*
***** Description
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:* 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs the result of multiplying the outputs of
: `source1` and `source2`.
:
: `source1`: The first input sampler (required).
:
: `source2`: The second input sampler (required).
***** Example
The multiplication occurs in the [-1, 1] domain by default.

#+BEGIN_SRC lisp :var arg="img/api/times-ex0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:* (c:billow-2d :seed "example")
           (c:checker-2d :seed "example"))
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/times-ex0.png]]
:end:

If you wanted to use the checker noise like a mask, you must rescale
both noises into the [0, 1] domain, perform the multiplication
there, and rescale it back to [-1, 1] domain.

#+BEGIN_SRC lisp :var arg="img/api/times-ex1.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:* (c:-> (c:billow-2d :seed "example")
             (c:strengthen 1/2 :bias .5))
           (c:-> (c:checker-2d :seed "example")
             (c:strengthen 1/2 :bias .5)))
  (c:strengthen 2 :bias -1)
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/api/times-ex1.png]]
:end:

*** /
*** abs
*** blend
*** cache
*** clamp
*** curve
*** displace
*** expt
*** fractalize
*** max
*** negate
*** power
*** rotate
*** scale
*** select
*** strengthen
*** terrace
*** translate
*** turbulance
*** uniform-scale
** Map
*** define-gradient
*** get-image-pixel
*** image
**** image-height
**** image-width
**** image-data
*** make-map
**** map-data
**** map-height
**** map-value
**** map-width
*** render-map
*** write-image
* Glossary
* References
* Prototyping
Remove this entire section when the org more docs are complete.
** Org Mode Code Block Examples
This is an example of how to configure org-mode so that when I execute
a block of common lisp the image it generates is places realtime inlined
into the org document as appropriate.

#+BEGIN_SRC shell :results output silent
echo "Hello world"
#+END_SRC

#+BEGIN_SRC lisp :results output silent
(ql:quickload :cricket)
(defpackage #:my-package
  (:local-nicknames (#:c #:cricket))
  (:use #:cl))
(in-package #:my-package) ;; <- doesn't affect repl!
#+END_SRC

#+BEGIN_SRC lisp :var arg="img/proto/proto-0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:checker-2d :seed "example")
  ;;(c:uniform-scale 1/4)
  (c:fractalize :fbm :octaves 3)
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/proto/proto-0.png]]
:end:

Example text.

#+BEGIN_SRC lisp :var arg="img/proto/proto-1.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:perlin-3d :seed "example")
  (c:uniform-scale 1.5)
  (c:fractalize :fbm :frequency 1.3 :octaves 6 :lacunarity 3 :persistence 0.22)
  (c:turbulence (c:open-simplex-3d :seed "foo") :power 1.2 :roughness 4)
  (c:make-map :width 256 :height 256)
  (c:render-map :gradient :terrain)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/proto/proto-1.png]]
:end:

Documentation retrival test:

*(perlin-2d &key seed)*
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:perlin-2d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 2-dimensional Perlin Improved noise values
: ranging from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

** Org Mode Wisdom
*** [[https://www.gnu.org/software/emacs/refcards/pdf/orgcard.pdf]]
*** [[https://orgmode.org/worg/orgcard.html]]
*** [[https://orgmode.org/manual/Variable-Index.html]]
*** C-c C-x C-v - org-toggle-inline-images
Used to toggle all inline images on and off.
*** C-c C-v b - org-babel-execute-buffer.
Execute all code blocks in the buffer and update the results.

#+BEGIN_COMMENT

The following code block utility is a post processor to convert the
absolute pathname of C:WRITE-IMAGE which has been flatted into a
string by org mode--with the #P and double quotes included(!), into
a string of just the relative filename given the cwd of theemacs process.
This is a pure hack that suffices for this one use case so I can develop
these docs with a fast workflow.

#+END_COMMENT
#+NAME: namestring
#+BEGIN_SRC lisp :var path="" :results output :exports none
(block hack
  (let* ((cwd (namestring (truename ".")))
         (broken "./img/static/broken.png"))
    (unless (and path (vectorp path) (>= (length path) 4))
      (return-from hack broken))

    ;; Attempt to clean up the path and remove the hamfisted
    ;; bodge org-mode did.
    (let* ((path (if (string= "#P\"" (subseq path 0 3))
                     (subseq path 2 (1- (length path)))
                     path)))

      ;; First, check that the cwd is actually a prefix of the path. This
      ;; increases the probability we're in the right cwd.
      (unless (search cwd path)
        (error "The path ~A is not a subpath of cwd ~A. cd to ~~/..../cricket-docs/"
               path cwd))
      (let* ((rel-path
               ;; strip off the #P"prefix and then the final " to leave
               ;; the path as a relative path wrt the cwd.
               ;; TODO: This means the cd of the emacs frame working on this
               ;; project MUST be cricket-docs/ for now. Ah well.
               (concatenate 'string "./"
                            (subseq (namestring path)
                                    ;; 1+ for the cwd's final /
                                    (1+ (length cwd)))))
             ;; Check to make sure it is actually valid.
             (rel-path (if (probe-file rel-path)
                           rel-path
                           broken)))
        ;; Finally dump to stdout.
        (format t "~A" rel-path)))))
#+END_SRC

#+RESULTS: namestring
