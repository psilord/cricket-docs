#+BEGIN_COMMENT
Constraints:
1. The frame in which you're editing must have its cwd be the toplevel of
the document directory. This is so image generation is linked correctly into
the org document.

2. You must have an sbcl repl running with the right stuff loaded into it
and in the right package. To configure the repl:

(ql:quickload :cricket)
(defpackage #:my-package
(:local-nicknames (#:c #:cricket))
(:use #:cl))
(in-package #:my-package)

3. C-c C-v b will rebuild the whole of the document and all images and
all docstrings.

4. C-c C-e g g will emit a github style markdown.

5. Ensure to save everything and commit all changed files, even images.
#+END_COMMENT

* Cricket Introduction
* Coherent Noise
* API
** Generators
*** [#B] Perlin
**** perlin-1d
***** Parameter List
***** Description
***** Example
**** perlin-2d
***** Parameter List
***** Description
***** Example
**** perlin-3d
***** Parameter List
***** Description
***** Example
**** perlin-4d
***** Parameter List
***** Description
***** Example
*** Simplex
**** simplex-1d
***** Parameter List
***** Description
***** Example
**** simplex-2d
***** Parameter List
***** Description
***** Example
**** simplex-3d
***** Parameter List
***** Description
***** Example
**** simplex-4d
***** Parameter List
***** Description
***** Example
*** Open-Simplex
**** open-simplex-2d
***** Parameter List
***** Description
***** Example
**** open-simplex-3d
***** Parameter List
***** Description
***** Example
**** open-simplex-4d
***** Parameter List
***** Description
***** Example
**** open-simplex2f-2d
***** Parameter List
***** Description
***** Example
**** open-simplex2f-3d
***** Parameter List
***** Description
***** Example
**** open-simplex2f-4d
***** Parameter List
***** Description
***** Example
**** open-simplex2s-2d
***** Parameter List
***** Description
***** Example
**** open-simplex2s-3d
***** Parameter List
***** Description
***** Example
**** open-simplex2s-4d
***** Parameter List
***** Description
***** Example
*** Value
**** value-2d
***** Parameter List
***** Description
***** Example
**** value-3d
***** Parameter List
***** Description
***** Example
*** Cellular
**** cellular-2d
***** Parameter List
***** Description
***** Example
**** cellular-3d
***** Parameter List
***** Description
***** Example
*** Cylinders
**** cylinders-3d
***** Parameter List
***** Description
***** Example
*** Spheres
**** spheres-3d
***** Parameter List
***** Description
***** Example
*** Checker
**** checker-2d
***** Parameter List
***** Description
***** Example
*** Constant
**** constant
***** Parameter List
***** Description
***** Example
*** FBM: Fractal Brownian Motion
**** fbm-2d
***** Parameter List
***** Description
***** Example
**** fbm-3d
***** Parameter List
***** Description
***** Example
**** fbm-4d
***** Parameter List
***** Description
***** Example
*** Billow
**** billow-2d
***** Parameter List
***** Description
***** Example
**** billow-3d
***** Parameter List
***** Description
***** Example
**** billow-4d
***** Parameter List
***** Description
***** Example
*** Multifractal
**** multifractal-2d
***** Parameter List
***** Description
***** Example
**** multifractal-3d
***** Parameter List
***** Description
***** Example
**** multifractal-4d
***** Parameter List
***** Description
***** Example
*** Hybrid-Multifractal
**** hybrid-multifractal-2d
***** Parameter List
***** Description
***** Example
**** hybrid-multifractal-3d
***** Parameter List
***** Description
***** Example
**** hybrid-multifractal-4d
***** Parameter List
***** Description
***** Example
*** Ridged-Multifractal
**** ridged-multifractal-2d
***** Parameter List
***** Description
***** Example
**** ridged-multifractal-3d
***** Parameter List
***** Description
***** Example
**** ridged-multifractal-4d
***** Parameter List
***** Description
***** Example
** Modifiers
*** +
**** Parameter List
**** Description
**** Example
*** -
**** Parameter List
**** Description
**** Example
*** *
**** Parameter List
**** Description
**** Example
*** /
**** Parameter List
**** Description
**** Example
*** abs
**** Parameter List
**** Description
**** Example
*** blend
**** Parameter List
**** Description
**** Example
*** cache
**** Parameter List
**** Description
**** Example
*** clamp
**** Parameter List
**** Description
**** Example
*** curve
**** Parameter List
**** Description
**** Example
*** displace
**** Parameter List
**** Description
**** Example
*** expt
**** Parameter List
**** Description
**** Example
*** fractalize
**** Parameter List
**** Description
**** Example
*** max
**** Parameter List
**** Description
**** Example
*** negate
**** Parameter List
**** Description
**** Example
*** power
**** Parameter List
**** Description
**** Example
*** rotate
**** Parameter List
**** Description
**** Example
*** scale
**** Parameter List
**** Description
**** Example
*** select
**** Parameter List
**** Description
**** Example
*** strengthen
**** Parameter List
**** Description
**** Example
*** terrace
**** Parameter List
**** Description
**** Example
*** translate
**** Parameter List
**** Description
**** Example
*** turbulance
**** Parameter List
**** Description
**** Example
*** uniform-scale
**** Parameter List
**** Description
**** Example
** Map
*** define-gradient
*** get-image-pixel
*** image
**** image-height
**** image-width
**** image-data
*** make-map
**** map-data
**** map-height
**** map-value
**** map-width
*** render-map
*** write-image
* Glossary
* References
* Prototyping
Remove this entire section when the org more docs are complete.
** Org Mode Code Block Examples
This is an example of how to configure org-mode so that when I execute
a block of common lisp the image it generates is places realtime inlined
into the org document as appropriate.

#+BEGIN_SRC shell :results output silent
echo "Hello world"
#+END_SRC

#+BEGIN_SRC lisp :results output silent
(ql:quickload :cricket)
(defpackage #:my-package
  (:local-nicknames (#:c #:cricket))
  (:use #:cl))
(in-package #:my-package) ;; <- doesn't affect repl!
#+END_SRC

#+BEGIN_SRC lisp :var arg="img/proto/proto-0.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:checker-2d :seed "example")
  ;;(c:uniform-scale 1/4)
  (c:fractalize :fbm :octaves 3)
  (c:make-map :width 256 :height 256)
  (c:render-map)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/proto/proto-0.png]]
:end:

Example text.

#+BEGIN_SRC lisp :var arg="img/proto/proto-1.png" :post namestring(path=*this*) :results file drawer :exports both
(c:-> (c:perlin-3d :seed "example")
  (c:uniform-scale 1.5)
  (c:fractalize :fbm :frequency 1.3 :octaves 6 :lacunarity 3 :persistence 0.22)
  (c:turbulence (c:open-simplex-3d :seed "foo") :power 1.2 :roughness 4)
  (c:make-map :width 256 :height 256)
  (c:render-map :gradient :terrain)
  (c:write-image arg))
#+END_SRC

#+RESULTS:
:results:
[[file:./img/proto/proto-1.png]]
:end:

Documentation retrival test:

The documentation string for PERLIN-2D is:
#+BEGIN_SRC lisp :results output :exports results
(format t "~A" (documentation #'c:perlin-2d 'function)))
#+END_SRC

#+RESULTS:
: Construct a sampler that, when sampled, outputs 2-dimensional Perlin Improved noise values
: ranging from -1.0 to 1.0.
:
: `seed`: A string used to seed the random number generator for this sampler, or NIL. If a seed is not
: supplied, one will be generated automatically which will negatively affect the reproducibility of
: the noise (optional, default: NIL).

** Org Mode Wisdom
*** [[https://www.gnu.org/software/emacs/refcards/pdf/orgcard.pdf]]
*** [[https://orgmode.org/worg/orgcard.html]]
*** [[https://orgmode.org/manual/Variable-Index.html]]
*** C-c C-x C-v - org-toggle-inline-images
Used to toggle all inline images on and off.
*** C-c C-v b - org-babel-execute-buffer.
Execute all code blocks in the buffer and update the results.
Must usually

* Org Mode Utilities
The following utility is a post processor to convert the absolute pathname
of C:WRITE-IMAGE which has been flatted into a string by org mode--with
the #P and double quotes included(!), into a string of just the
relative filename given the cwd of theemacs process.
This is a pure hack that suffices for this one use case so I can develop
these docs with a fast workflow.
#+NAME: namestring
#+BEGIN_SRC lisp :var path="" :results output :exports none
(block hack
  (let* ((cwd (namestring (truename ".")))
         (broken "./img/static/broken.png"))
    (unless (and path (vectorp path) (>= (length path) 4))
      (return-from hack broken))

    ;; Attempt to clean up the path and remove the hamfisted
    ;; bodge org-mode did.
    (let* ((path (if (string= "#P\"" (subseq path 0 3))
                     (subseq path 2 (1- (length path)))
                     path)))

      ;; First, check that the cwd is actually a prefix of the path. This
      ;; increases the probability we're in the right cwd.
      (unless (search cwd path)
        (error "The path ~A is not a subpath of cwd ~A. cd to ~~/..../cricket-docs/"
               path cwd))
      (let ((rel-path
              (if (pathname path)
                  ;; strip off the #P"prefix and then the final " to leave
                  ;; the path as a relative path wrt the cwd.
                  ;; TODO: This means the cd of the emacs frame working on this
                  ;; project MUST be cricket-docs/ for now. Ah well.
                  (concatenate 'string "./"
                               (subseq (namestring path)
                                       ;; 1+ for the cwd's final /
                                       (1+ (length cwd))))
                  broken)))
        (format t "~A" rel-path)))))
#+END_SRC

#+RESULTS: namestring
